// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LeiaContext))]
    partial class LeiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataObjects.BackendLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasMaxLength(8196)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("Timestamp");

                    b.ToTable("BackendLogs");
                });

            modelBuilder.Entity("DataObjects.ConfigurationData", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOpenForPlayers")
                        .HasColumnType("bit");

                    b.HasKey("ConfigId");

                    b.ToTable("ConfigurationsData");
                });

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataObjects.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Object Match"
                        });
                });

            modelBuilder.Entity("DataObjects.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("LeagueId");

                    b.ToTable("League");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstallSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                      .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DataObjects.PlayerActiveTournament", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("DidCharge")
                        .HasColumnType("bit");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinTournamentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchmakeStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("MatchmakeStartTime");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.ToTable("PlayerActiveTournaments");
                });

            modelBuilder.Entity("DataObjects.PlayerAuthToken", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlayerId");

                    b.HasIndex("Secret")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("PlayerAuthToken");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>
                {
                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CurrencyBalance")
                        .HasColumnType("float");

                    b.HasKey("CurrenciesId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.PlayerGameRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGameRatings");
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TournamentSessionId")
                        .HasColumnType("int");

                    b.Property<bool?>("DidClaim")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerScore")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitScoreTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TournamentSessionId");

                    b.HasIndex("TournamentSessionId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("PlayerTournamentSession");
                });

            modelBuilder.Entity("DataObjects.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int>("ForPosition")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<double?>("RewardAmount")
                        .HasColumnType("float");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardId");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<TimeSpan>("GameplaySessionTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionChurnRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Property<int>("TournamentSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentSessionId"));

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SessionDataSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentSeed")
                        .HasColumnType("int");

                    b.HasKey("TournamentSessionId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("SessionDataSessionId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("DataObjects.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentTypeId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<double?>("EntryFee")
                        .HasColumnType("float");

                    b.Property<int?>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<double?>("Rake")
                        .HasColumnType("float");

                    b.Property<string>("TournamentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentTypeId");

                    b.HasIndex("CurrenciesId");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("DataObjects.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("DataObjects.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });
            modelBuilder.Entity("DataObjects.AchievementElement", b =>
            {
                b.Property<int>("AchievementsElementId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementsElementId"));

                b.Property<int>("ElementNameId")
                    .HasColumnType("int");

                b.Property<int?>("AmountNeeded")
                    .HasColumnType("int");

                b.Property<int?>("CurrentAmount")
                    .HasColumnType("int");

                b.Property<bool?>("IsCompleted")
                    .HasColumnType("bit");               

                b.Property<int>("AchievementId")
                    .HasColumnType("int");

                b.HasKey("AchievementsElementId");

                //b.HasIndex("AchievementId");

                b.ToTable("AchievementElements");
            });

            modelBuilder.Entity("DataObjects.Achievement", b =>
            {
                b.Property<int>("AchievementId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                b.Property<string>("AchievementName")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("PlayerId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("AchievementId");

                b.ToTable("Achievements");
            });

            modelBuilder.Entity("DataObjects.DailyReward", b =>
            {
                b.Property<int>("DailyRewardsId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyRewardsId"));

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("Type")
                   .HasColumnType("int");

                b.Property<double?>("Amount")
                        .HasColumnType("float");

                b.Property<int>("CurrencyId")
                    .HasColumnType("int");

                b.HasKey("DailyRewardsId");

                b.ToTable("DailyRewards");
            });

            modelBuilder.Entity("DataObjects.PlayerDailyReward", b =>
            {
                b.Property<int>("PlayerDailyRewardId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerDailyRewardId"));

                b.Property<DateTime>("LastClaimDate")
                       .HasColumnType("datetime2");

                b.Property<int>("CurrentRewardDay")
                    .HasColumnType("int");

                b.Property<int>("ConsecutiveDays")
                    .HasColumnType("int");

                b.Property<Guid>("PlayerId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("DailyRewardsId")
                    .HasColumnType("int");
                 
                b.Property<bool>("IsActive")
                    .HasColumnType("bit");
                
                b.HasKey("PlayerDailyRewardId");

                b.ToTable("PlayerDailyRewards");
            });

            modelBuilder.Entity("DataObjects.PlayerHourlyReward", b =>
            {
                b.Property<int>("HourlyRewardId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HourlyRewardId"));

                b.Property<DateTime>("StartDate")
                       .HasColumnType("datetime2");

                b.Property<int>("DailyRewardsId")
                    .HasColumnType("int");
                                           
                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<Guid>("PlayerId")
                   .HasColumnType("uniqueidentifier");

                b.HasKey("HourlyRewardId");

                b.ToTable("PlayerHourlyRewards");
            });

            modelBuilder.Entity("DataObjects.EggReward", b =>
            {
                b.Property<int>("EggRewardId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EggRewardId"));
              
                b.Property<int>("Count")
                   .HasColumnType("int");
               
                b.Property<int?>("CurrencyId")
                    .HasColumnType("int");

                b.Property<int?>("RewardAmount")
                    .HasColumnType("int");

                b.HasKey("EggRewardId");

                b.ToTable("EggRewards");
            });

            modelBuilder.Entity("DataObjects.PlayerEggReward", b =>
            {
                b.Property<int>("PlayerEggRewardId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerEggRewardId"));

                b.Property<DateTime>("StartDate")
                       .HasColumnType("datetime2");

                b.Property<int>("Amount")
                    .HasColumnType("int");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<Guid>("PlayerId")
                   .HasColumnType("uniqueidentifier

                b.HasKey("PlayerEggRewardId");

                b.ToTable("PlayerEggRewards");
            });

            modelBuilder.Entity("RewardTournamentType", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("RewardId", "TournamentTypeId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("RewardTournamentType");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.HasOne("DataObjects.League", "League")
                        .WithMany("Players")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("DataObjects.PlayerAuthToken", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany("PlayerCurrencies")
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("PlayerCurrencies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currencies");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerGameRating", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentSession", "TournamentSession")
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("TournamentSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentType", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TournamentSession");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("DataObjects.Reward", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.League", null)
                        .WithMany("Rewards")
                        .HasForeignKey("LeagueId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.HasOne("DataObjects.SessionData", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("SessionDataSessionId");
                });

            modelBuilder.Entity("DataObjects.TournamentType", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("RewardTournamentType", b =>
                {
                    b.HasOne("DataObjects.Reward", null)
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentType", null)
                        .WithMany()
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Navigation("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.League", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Navigation("PlayerCurrencies");

                    b.Navigation("PlayerTournamentSessions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Navigation("PlayerTournamentSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
