// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LeiaContext))]
    partial class LeiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstallSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>
                {
                    //b.Property<int>("CurrenciesCurrencyId")
                    //    .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CurrencyBalance")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    //b.HasKey("CurrenciesCurrencyId", "PlayerId");
                    b.HasKey("CurrencyId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TournamentSessionId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerScore")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TournamentSessionId");

                    b.HasIndex("TournamentSessionId");

                    b.ToTable("PlayerTournamentSession");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<TimeSpan>("GameplaySessionTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionChurnRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DataObjects.TournamentData", b =>
                {
                    b.Property<int>("TournamentDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentDataId"));

                    b.Property<double>("Earning")
                        .HasColumnType("float");

                    b.Property<int>("EarningCurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<int>("EntryFeeCurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("NumBoosterClicked")
                        .HasColumnType("int");

                    b.Property<int?>("NumPowerUps")
                        .HasColumnType("int");

                    b.Property<DateTime>("TournamentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TournamentStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("TournamentDataId");

                    b.HasIndex("EarningCurrencyId");

                    b.HasIndex("EntryFeeCurrencyId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("TournamentsData");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Property<int>("TournamentSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentSessionId"));

                    b.Property<int>("TournamentDataId")
                        .HasColumnType("int");

                    b.HasKey("TournamentSessionId");

                    b.HasIndex("TournamentDataId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("DataObjects.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentTypeId"));

                    b.Property<string>("TournamentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentTypeId");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("DataObjects.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("DataObjects.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CurrencyAmount")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SessionDataTournamentSession", b =>
                {
                    b.Property<int>("SessionsSessionId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentSessionId")
                        .HasColumnType("int");

                    b.HasKey("SessionsSessionId", "TournamentSessionId");

                    b.HasIndex("TournamentSessionId");

                    b.ToTable("SessionDataTournamentSession");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>  
                {
                    b.HasOne("DataObjects.Currencies", null)
                        .WithMany("PlayerCurrencies")
                        //.HasForeignKey("CurrenciesCurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", null)
                        .WithMany("PlayerCurrencies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.HasOne("DataObjects.Player", null)
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentSession", null)
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("TournamentSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.TournamentData", b =>
                {
                    b.HasOne("DataObjects.Currencies", "EarningCurrency")
                        .WithMany()
                        .HasForeignKey("EarningCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Currencies", "EntryFeeCurrency")
                        .WithMany()
                        .HasForeignKey("EntryFeeCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentType", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EarningCurrency");

                    b.Navigation("EntryFeeCurrency");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.HasOne("DataObjects.TournamentData", "TournamentData")
                        .WithMany()
                        .HasForeignKey("TournamentDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentData");
                });

            modelBuilder.Entity("DataObjects.Transactions", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Player");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("SessionDataTournamentSession", b =>
                {
                    b.HasOne("DataObjects.SessionData", null)
                        .WithMany()
                        .HasForeignKey("SessionsSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentSession", null)
                        .WithMany()
                        .HasForeignKey("TournamentSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Navigation("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Navigation("PlayerCurrencies");

                    b.Navigation("PlayerTournamentSessions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Navigation("PlayerTournamentSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
