// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LeiaContext))]
    [Migration("20250610140221_AddTimeObgectsManager")]
    partial class AddTimeObgectsManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataObjects.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AchievementId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("DataObjects.AchievementElement", b =>
                {
                    b.Property<int>("AchievementsElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementsElementId"));

                    b.Property<int?>("AmountNeeded")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentAmount")
                        .HasColumnType("int");

                    b.Property<int>("ElementNameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("AchievementsElementId");

                    b.ToTable("AchievementElements");
                });

            modelBuilder.Entity("DataObjects.BackendLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasMaxLength(8196)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("Timestamp");

                    b.ToTable("BackendLogs");
                });

            modelBuilder.Entity("DataObjects.CategoriesObject", b =>
                {
                    b.Property<int>("CategoryObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryObjectId"));

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryObjectId");

                    b.ToTable("CategoriesObjects");
                });

            modelBuilder.Entity("DataObjects.ConfigurationData", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOpenForPlayers")
                        .HasColumnType("bit");

                    b.HasKey("ConfigId");

                    b.ToTable("ConfigurationsData");
                });

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataObjects.DailyReward", b =>
                {
                    b.Property<int>("DailyRewardsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyRewardsId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("DailyRewardsId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("DailyRewards");
                });

            modelBuilder.Entity("DataObjects.EggReward", b =>
                {
                    b.Property<int>("EggRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EggRewardId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("RewardAmount")
                        .HasColumnType("int");

                    b.HasKey("EggRewardId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("EggRewards");
                });

            modelBuilder.Entity("DataObjects.FTUE", b =>
                {
                    b.Property<int>("FtueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FtueId"));

                    b.Property<int?>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("FtueId");

                    b.ToTable("FTUEs");
                });

            modelBuilder.Entity("DataObjects.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OpenForTime")
                        .HasColumnType("float");

                    b.Property<int>("PlayerLevel")
                        .HasColumnType("int");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DataObjects.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Object Match"
                        });
                });

            modelBuilder.Entity("DataObjects.GivenPlayerAchievement", b =>
                {
                    b.Property<int>("GivenAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GivenAchievementId"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementsElementId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GivenDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GivenAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("AchievementsElementId");

                    b.ToTable("GivenPlayerAchievements");
                });

            modelBuilder.Entity("DataObjects.GivenPlayerEggReward", b =>
                {
                    b.Property<int>("GivenEggRewordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GivenEggRewordId"));

                    b.Property<int>("ActivePlayerEggsId")
                        .HasColumnType("int");

                    b.Property<int>("EggRewardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GivenDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GivenEggRewordId");

                    b.HasIndex("ActivePlayerEggsId");

                    b.HasIndex("EggRewardId");

                    b.ToTable("GivenPlayerEggRewards");
                });

            modelBuilder.Entity("DataObjects.GivenPlayerLevelReward", b =>
                {
                    b.Property<int>("GivenLevelRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GivenLevelRewardId"));

                    b.Property<DateTime>("GivenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelRewardId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GivenLevelRewardId");

                    b.HasIndex("LevelRewardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GivenPlayerLevelRewards");
                });

            modelBuilder.Entity("DataObjects.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("LeagueId");

                    b.ToTable("League");
                });

            modelBuilder.Entity("DataObjects.LevelReward", b =>
                {
                    b.Property<int>("LevelRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelRewardId"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("RewardAmount")
                        .HasColumnType("float");

                    b.HasKey("LevelRewardId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FeatureId");

                    b.ToTable("LevelRewards");
                });

            modelBuilder.Entity("DataObjects.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<decimal>("AmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BonusAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Gems")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OpenForTime")
                        .HasColumnType("float");

                    b.HasKey("PackageId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstallSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalExp")
                        .HasColumnType("float");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DataObjects.PlayerActiveTournament", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("DidCharge")
                        .HasColumnType("bit");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinTournamentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchmakeStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("MatchmakeStartTime");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.ToTable("PlayerActiveTournaments");
                });

            modelBuilder.Entity("DataObjects.PlayerAuthToken", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlayerId");

                    b.HasIndex("Secret")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("PlayerAuthToken");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>
                {
                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CurrencyBalance")
                        .HasColumnType("float");

                    b.HasKey("CurrenciesId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.PlayerDailyReward", b =>
                {
                    b.Property<int>("PlayerDailyRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerDailyRewardId"));

                    b.Property<int>("ConsecutiveDays")
                        .HasColumnType("int");

                    b.Property<int>("CurrentRewardDay")
                        .HasColumnType("int");

                    b.Property<int>("DailyRewardsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastClaimDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayerDailyRewardId");

                    b.HasIndex("DailyRewardsId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerDailyRewards");
                });

            modelBuilder.Entity("DataObjects.PlayerExpByGameType", b =>
                {
                    b.Property<int>("GameTypeToExpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameTypeToExpId"));

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("Exp")
                        .HasColumnType("float");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameTypeToExpId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameTypeToExp");
                });

            modelBuilder.Entity("DataObjects.PlayerFeature", b =>
                {
                    b.Property<int>("PlayerFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerFeatureId"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayerFeatureId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFeatures");
                });

            modelBuilder.Entity("DataObjects.PlayerFtue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FtueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FtueId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFtues");
                });

            modelBuilder.Entity("DataObjects.PlayerGameRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGameRatings");
                });

            modelBuilder.Entity("DataObjects.PlayerHourlyReward", b =>
                {
                    b.Property<int>("HourlyRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HourlyRewardId"));

                    b.Property<int?>("DailyRewardsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastClaimDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HourlyRewardId");

                    b.HasIndex("DailyRewardsId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerHourlyRewards");
                });

            modelBuilder.Entity("DataObjects.PlayerMonthlyEgg", b =>
                {
                    b.Property<int>("ActivePlayerEggsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivePlayerEggsId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivePlayerEggsId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerMonthlyEggs");
                });

            modelBuilder.Entity("DataObjects.PlayerProfileData", b =>
                {
                    b.Property<int>("PlayerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerProfileId"));

                    b.Property<int?>("FavoriteGameTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PlayerPictureId")
                        .HasColumnType("int");

                    b.Property<int?>("WinCounte")
                        .HasColumnType("int");

                    b.HasKey("PlayerProfileId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerProfileData");
                });

            modelBuilder.Entity("DataObjects.PlayerTimeManager", b =>
                {
                    b.Property<int>("TimeManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeManagerId"));

                    b.Property<int>("CategoryObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeObjectId")
                        .HasColumnType("int");

                    b.HasKey("TimeManagerId");

                    b.HasIndex("CategoryObjectId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTimeManager");
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TournamentSessionId")
                        .HasColumnType("int");

                    b.Property<bool?>("DidClaim")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerScore")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitScoreTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TournamentSessionId");

                    b.HasIndex("TournamentSessionId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("PlayerTournamentSession");
                });

            modelBuilder.Entity("DataObjects.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int>("ForPosition")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<double?>("RewardAmount")
                        .HasColumnType("float");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardId");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<TimeSpan>("GameplaySessionTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionChurnRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Property<int>("TournamentSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentSessionId"));

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SessionDataSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentSeed")
                        .HasColumnType("int");

                    b.HasKey("TournamentSessionId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("SessionDataSessionId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("DataObjects.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentTypeId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<double?>("EntryFee")
                        .HasColumnType("float");

                    b.Property<int?>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<double?>("OpenForTime")
                        .HasColumnType("float");

                    b.Property<double?>("Rake")
                        .HasColumnType("float");

                    b.Property<string>("TournamentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentTypeId");

                    b.HasIndex("CurrenciesId");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("DataObjects.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("DataObjects.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DataObjects.UserMainProgression", b =>
                {
                    b.Property<int>("UserLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLevel"));

                    b.Property<double?>("GamesPlayrd")
                        .HasColumnType("float");

                    b.Property<int>("SessionLength")
                        .HasColumnType("int");

                    b.Property<double>("SessionsDesired")
                        .HasColumnType("float");

                    b.Property<int>("TimePerGame")
                        .HasColumnType("int");

                    b.Property<double?>("XPForUnity")
                        .HasColumnType("float");

                    b.Property<double?>("XPRequired")
                        .HasColumnType("float");

                    b.Property<double>("XpPerMinute")
                        .HasColumnType("float");

                    b.HasKey("UserLevel");

                    b.ToTable("UserMainProgression");
                });

            modelBuilder.Entity("RewardTournamentType", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("RewardId", "TournamentTypeId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("RewardTournamentType");
                });

            modelBuilder.Entity("DataObjects.Achievement", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.DailyReward", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("DataObjects.EggReward", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("DataObjects.GivenPlayerAchievement", b =>
                {
                    b.HasOne("DataObjects.Achievement", "Achievement")
                        .WithMany("GivenPlayerAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.AchievementElement", "AchievementElement")
                        .WithMany()
                        .HasForeignKey("AchievementsElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("AchievementElement");
                });

            modelBuilder.Entity("DataObjects.GivenPlayerEggReward", b =>
                {
                    b.HasOne("DataObjects.PlayerMonthlyEgg", "PlayerMonthlyEgg")
                        .WithMany()
                        .HasForeignKey("ActivePlayerEggsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.EggReward", "EggReward")
                        .WithMany()
                        .HasForeignKey("EggRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EggReward");

                    b.Navigation("PlayerMonthlyEgg");
                });

            modelBuilder.Entity("DataObjects.GivenPlayerLevelReward", b =>
                {
                    b.HasOne("DataObjects.LevelReward", "LevelReward")
                        .WithMany()
                        .HasForeignKey("LevelRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelReward");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.LevelReward", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Feature", "Features")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.Navigation("Currencies");

                    b.Navigation("Features");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.HasOne("DataObjects.League", "League")
                        .WithMany("Players")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("DataObjects.PlayerAuthToken", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerCurrencies", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany("PlayerCurrencies")
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("PlayerCurrencies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currencies");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerDailyReward", b =>
                {
                    b.HasOne("DataObjects.DailyReward", "DailyReward")
                        .WithMany()
                        .HasForeignKey("DailyRewardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReward");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerExpByGameType", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataObjects.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currencies");

                    b.Navigation("GameType");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerFeature", b =>
                {
                    b.HasOne("DataObjects.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerFtue", b =>
                {
                    b.HasOne("DataObjects.FTUE", "FTUEs")
                        .WithMany()
                        .HasForeignKey("FtueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FTUEs");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerGameRating", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerHourlyReward", b =>
                {
                    b.HasOne("DataObjects.DailyReward", "DailyReward")
                        .WithMany()
                        .HasForeignKey("DailyRewardsId");

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReward");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerMonthlyEgg", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerProfileData", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerTimeManager", b =>
                {
                    b.HasOne("DataObjects.CategoriesObject", "CategoriesObject")
                        .WithMany()
                        .HasForeignKey("CategoryObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriesObject");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.PlayerTournamentSession", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentSession", "TournamentSession")
                        .WithMany("PlayerTournamentSessions")
                        .HasForeignKey("TournamentSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentType", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TournamentSession");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("DataObjects.Reward", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.League", null)
                        .WithMany("Rewards")
                        .HasForeignKey("LeagueId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.HasOne("DataObjects.Player", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.HasOne("DataObjects.SessionData", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("SessionDataSessionId");
                });

            modelBuilder.Entity("DataObjects.TournamentType", b =>
                {
                    b.HasOne("DataObjects.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("RewardTournamentType", b =>
                {
                    b.HasOne("DataObjects.Reward", null)
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects.TournamentType", null)
                        .WithMany()
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects.Achievement", b =>
                {
                    b.Navigation("GivenPlayerAchievements");
                });

            modelBuilder.Entity("DataObjects.Currencies", b =>
                {
                    b.Navigation("PlayerCurrencies");
                });

            modelBuilder.Entity("DataObjects.League", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("DataObjects.Player", b =>
                {
                    b.Navigation("PlayerCurrencies");

                    b.Navigation("PlayerTournamentSessions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DataObjects.SessionData", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("DataObjects.TournamentSession", b =>
                {
                    b.Navigation("PlayerTournamentSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
